{"version":3,"sources":["component/NavPlaceholder.tsx","component/AboutMe.tsx","component/ProjectList.tsx","component/ContentWrapper.tsx","component/NavComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavPlaceholder","className","AboutMe","Fragment","ProjectList","ContentWrapper","id","NavComponent","Navbar","bg","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,oB,MCHJ,SAASC,IACtB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKF,UAAU,gBACb,wBAAIA,UAAU,kCAAd,YACA,4cASA,oHCbO,SAASG,IACtB,OACE,kBAAC,IAAMD,SAAP,KACE,yCCDS,SAASE,IACtB,OACE,kBAAC,IAAMF,SAAP,KACE,yBAAKF,UAAU,WACb,yBAAKK,GAAG,UAAUL,UAAU,mBAC1B,wBAAIA,UAAU,qCAAd,eACA,yBAAKA,UAAU,mBAAf,gCAEF,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,mBACb,kBAACC,EAAD,MACA,6BACA,kBAACE,EAAD,U,0BCbG,SAASG,IACtB,OAOE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,MAAM,MAAMV,UAAU,WACnD,kBAACO,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,qBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,iBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBV,GAAG,eAAeL,UAAU,uBAC3C,kBAACgB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUL,KAAK,KAAf,QACA,kBAACI,EAAA,EAAIC,KAAL,CACEL,KAAK,+CACLM,OAAO,UAFT,UAMA,kBAACF,EAAA,EAAIC,KAAL,CAAUL,KAAK,KAAf,cChBV,IAYeO,EAZO,WACpB,OACE,kBAAC,IAAMjB,SAAP,KACE,kBAACI,EAAD,MACA,kBAACP,EAAD,MACA,kBAAC,IAAD,KACE,kBAACK,EAAD,SCFYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5efc37a8.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../style/navPlaceholder.scss';\r\n\r\nexport default function NavPlaceholder() {\r\n  return (\r\n    <div className=\"nav-placeholder\">\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AboutMe() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"aboutme mb-4\">\r\n        <h2 className=\"text-left text-capitalize pt-3\">About me</h2>\r\n        <p>\r\n          Full-stack developer with a master and bachelor degree in electrical\r\n          and computer engineering (ECE). I have a solid understanding of\r\n          mathematics and good logic thinking. My passion for learning things\r\n          under the hood and solving complex problems makes me interested in\r\n          solving problems with clean and efficient codes. The speed at which I\r\n          learn gives me the opportunity to continually learn new skills and the\r\n          latest technologies.\r\n        </p>\r\n        <p>\r\n          Currently keeping working on the \"Spa de la rue\" project using Drupal\r\n          to deploy it.\r\n        </p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {data} from \"../data/mockData\";\r\n\r\nexport default function ProjectList() {\r\n  return (\r\n    <React.Fragment>\r\n      <h2>Projects</h2>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport \"../style/contentWrapper.scss\";\r\nimport AboutMe from \"./AboutMe\";\r\nimport ProjectList from \"./ProjectList\";\r\n\r\nexport default function ContentWrapper() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"wrapper\">\r\n        <nav id=\"sidebar\" className=\"col-md-4 col-12\">\r\n          <h3 className=\"text-right mt-3 align-self-center\">Hi I'm Hans</h3>\r\n          <div className=\"text-right mt-3\">Junior Full Stack Developer</div>\r\n        </nav>\r\n        <div className=\"content col-md-8 col-12\">\r\n          <div className=\"container-fluid\">\r\n            <AboutMe />\r\n            <hr />\r\n            <ProjectList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"../style/navComponent.scss\";\r\n\r\nexport default function NavComponent() {\r\n  return (\r\n    // <div className=\"navbar navbar-expand-lg navbar-expand-md navbar-light bg-light fixed-top justify-content-between\">\r\n    //   <a className=\"navbar-brand\" href=\"/\">\r\n    //     Hans(Hanxiang) Xu\r\n    //   </a>\r\n\r\n    // </div>\r\n    <Navbar bg=\"light\" expand=\"md\" fixed=\"top\" className=\"big-nav\">\r\n      <Navbar.Brand href=\"/\">Hans(Hanxiang) Xu</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"collapse-nav\" />\r\n      <Navbar.Collapse id=\"collapse-nav\" className=\"justify-content-end\">\r\n        <Nav>\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link\r\n            href=\"https://resume.creddle.io/resume/ao5zzbuepvb\"\r\n            target=\"_blank\"\r\n          >\r\n            Resume\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/\">Project</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport NavPlaceholder from \"./component/NavPlaceholder\";\r\nimport ContentWrapper from \"./component/ContentWrapper\";\r\n\r\nimport NavComponent from './component/NavComponent';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <NavComponent />\r\n      <NavPlaceholder />\r\n      <Router>\r\n        <ContentWrapper />\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}